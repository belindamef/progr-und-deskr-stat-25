```{r eval = T, echo = F}
# | label: define directories
abb_path <- file.path(dirname(getwd()), "Abbildungen")
data_path <- file.path(dirname(getwd()), "Daten")
```


# Titelfolie {.plain}
\center
![](../Abbildungen/otto.png){width="20%"}

\vspace{2mm}

\Large
Programmierung und Deskriptive Statistik
\vspace{4mm}

\normalsize
BSc Psychologie WiSe 2024/25

\vspace{15mm}
\normalsize
Belinda Fleischmann


# Termine {.plain}


# Kontrollstrukturen und Datensimulationen in R - Titelfolie {.plain}

\vfill
\huge
\begin{center}
(10) Kontrollstrukturen, Debugging und Datensimulationen in R
\end{center}
\vfill



# AGENDA {.plain}
\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

Debugging

Datensimulationen

Programmierübungen und Selbstkontrollfragen

\vfill



\AtBeginSection{}
\section{Kontrollstrukturen}
# Kontrollstrukturen ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

**Kontrollstrukturen**

Debugging

Datensimulationen

Programmierübungen und Selbstkontrollfragen

\vfill


# Kontrollstrukturen

\textcolor{darkblue}{Motivation}

Programmiercode wird streng sequentiell Befehl für Befehl ausgeführt.

Manchmal möchten wir von dieser rein sequentiellen Befehlsreiehenfolge abweichen.

Die prinzipiellen Werkzeuge dafür sind **Kontrollstrukturen**. Dazu gehören `if`-statements, `switch`-statements und Schleifen mit `for`, `while` oder `repeat`. 

\vfill


# Kontrollstrukturen: `if`-statements

\textcolor{darkblue}{if-statements}

\footnotesize

```{r, echo = T, eval = F}
if (Bedingung) {
  TrueAktion        # Befehl, der ausgeführt wird, falls Bedingung TRUE ist
}
```

\normalsize

* Wenn `Bedingung` `TRUE` ist, wird `TrueAktion` ausgführt.
* Wenn `Bedingung` `FALSE` ist, wird `TrueAktion` nicht ausgeführt.

\textcolor{darkblue}{if-else-statements}

\footnotesize

```{r, echo = T, eval = F}
if (Bedingung) {
  TrueAktion        # Befehl, der ausgeführt wird, falls Bedingung TRUE ist
} else {
  FalseAktion       # Befehl, der ausgeführt wird, falls Bedingung FALSE ist
}
```

\normalsize

* Wenn `Bedingung` `TRUE` ist, wird `TrueAktion` ausgführt.
* Wenn `Bedingung` `FALSE` ist, wird `FalseAktion` ausgeführt.


# Kostrollstrukturen: `if`-statements

\textcolor{darkcyan}{Beispiele}

\footnotesize

```{r, echo = T, eval = T}
x <- 3
if (x > 0) {
  print("x ist größer als 0")
}

y <- -3
if (y > 0){
  print("y ist größer als 0")
} else{
  print("y ist nicht größer als 0")
}
```

# Wiederholung: Logischer Operatoren

\setstretch{1.6}

\small

* Die Boolesche Algebra und R kennen zwei *logische Werte*: TRUE und FALSE
* Bei Auswertung von Relationsoperatoren ergeben sich logische Werte

\begin{center}
\begin{tabular}{l|l}
Relationsoperator 	& Bedeutung 							\\\hline
$==$ 				& Gleich 								\\
$!=$ 				& Ungleich 								\\
$<$, $>$			& Kleiner, Größer 						\\
$<=$, $>=$ 			& Kleiner gleich, Größer gleich			\\
$\vert$    			& ODER              					\\
$\&$    			& UND              						\\
\end{tabular}
\end{center}

\vfill

* $<,<=,>,>=$ werden zumeist auf numerische Werte angewendet.
* $==,!=$ werden zumeist auf beliebige Datenstrukturen angewendet.
* $\vert$  und $\&$ werden zumeist auf logische Werte angewendet.
* $\vert$ implementiert das inklusive *oder*. Die Funktion xor() implementiert das exklusive ODER.



# Kontrollstrukturen: `if`-statements

\textcolor{darkcyan}{Beispiele}

\tiny
\setstretch{1.1}
\vfill

```{r, echo = T, eval = T}
x <- 3
y <- 2

# Logisches UND/ODER
if (x > 0 | y > 0) {
  print("Es sind beide, oder eine der beiden Variablen größer 0.")
} else{
  print("Keine der Variablen ist größer 0.")
}

# Logisches UND
if (x > 0 & y > 0) {
  print("x und y sind beide größer 0.")
} else{
  print("Es sind nicht beide Variablen x und y größer 0, aber vielleicht eine der beiden.")
}

# Exklusives ODER
if (xor(x > 0, y > 0)){
  print("Genau eine der 2 Variablen x und y ist größer 0, aber nicht beide.")
} else{
  print("Es sind entweder keine der Variablen x und y oder beide größer 0.")
}
```


# Kontrollstrukturen: `switch`-statements

\small
\textcolor{darkblue}{Motivation}

Kombinierte `if-else` -statements können leicht unübersichtlich werden.

\setstretch{1.1}
\tiny
```{r, echo = T, eval = T}
x <- 2
if (x == 1){
  print("Aktion 1")
} else if(x == 2){
  print("Aktion 2")
} else if(x == 3){
  print("Aktion 3")
} else if(x == 4){
  print("Aktion 4")
}
```

\small
\textcolor{darkblue}{switch-statement mit Integer}

\tiny
```{r, echo = T, eval = T}
x <- 2
switch(
  x,                               # switch Variable
  print("Aktion 1"),               # 1. Aktion
  print("Aktion 2"),               # 2. Aktion
  print("Aktion 3"),               # 3. Aktion
  print("Aktion 4")                # 4. Aktion
)
```

# Kontrollstrukturen: `switch`-statements


\small
\textcolor{darkblue}{switch-statement mit Character}

\vspace{2mm}

\footnotesize
```{r, echo = T, eval = T}
x <- "a"
switch(
  x,                               # switch Variable
  a = print("Aktion 1"),           # 1. Aktion
  b = print("Aktion 2"),           # 2. Aktion
  c = print("Aktion 3"),           # 3. Aktion
  d = print("Aktion 4")            # 4. Aktion
)
```

\vfill



# Kontrollstrukturen: `for`-Schleifen

\normalsize
\textcolor{darkblue}{for-Schleifen}
\vspace{2mm}
\footnotesize
```{r, echo = T, eval = F}
for (item in sequenz){
  zu_wiederholende_Aktion          # Aktion, die wiederholt werden soll
}
```

\normalsize
\textcolor{darkcyan}{Beispiel}

\footnotesize
```{r, echo = T, eval = T}
for (i in 1:3) {
  print(i)                         # Aktion, die wiederholt werden soll
}
```


# Kontrollstrukturen: `while` -Schleifen

\setstretch{1.3}
\normalsize
\textcolor{darkblue}{while-Schleifen}

\footnotesize
while-Schleifen iterieren Codeabschnitte basierend auf einer Bedingung.

\vspace{2mm}

\setstretch{1.1}
```{r, echo = T, eval = F}
while (Bedingung) {
  TrueAktion            # TrueAktion wird ausgeführt, solange Condition == TRUE
}
```

\textcolor{darkcyan}{Beispiel}

\setstretch{1}
```{r, echo = T, eval = T}
i <- 5
while (i < 11) {
  print(i)
  i <- i + 1
}
```


# Kontrollstrukturen: `repeat` -Schleifen
\setstretch{1.3}
\normalsize
\textcolor{darkblue}{repeat-Schleifen}

\footnotesize
repeat-loops wiederholen Codeabschnitte bis zu einem \texttt{break} Befehl

\vspace{2mm}
\setstretch{1.1}

```{r, echo = T, eval = F}
repeat {
  TrueAktion            # Aktion wird ausgeführt, bis ein break Befehl evaluiert wird
}
```

\textcolor{darkcyan}{Beispiel}

\setstretch{1}
```{r, echo = T, eval = T}
i <- 1
repeat {
  print(i)
  i <- i + 1
  if (i == 5) {
    break
  }
}
```



\AtBeginSection{}
\section{Debugging}
# Debugging ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

**Debugging**

Datensimulationen

Programmierübungen und Selbstkontrollfragen

\vfill

# Debugging
\setstretch{1.7}
\vfill
\justifying

"Als Debuggen (dt. Entwanzen) oder Fehlerbehebung bezeichnet man in der Informatik den Vorgang, in einem Computerprogramm Fehler oder unerwartetes Verhalten zu diagnostizieren und zu beheben. Die Suche von Programmfehlern (sogenannten Bugs) ist eine der wichtigsten und anspruchsvollsten Aufgaben der Softwareentwicklung und nimmt einen großen Teil der Entwicklungszeit in Anspruch."

\vfill
\flushright
\textit{Wikipedia}

# \textit{printf} debugging

\textcolor{red}{TODO}



# Debugging mit \texttt{browser()}

\setstretch{1.5}
\small

Die `R base` Funktion `browser()` erlaubt das Pausieren der Exekution eines Skripts und Inspektion der aktuellen *environment*.

\textcolor{darkcyan}{Beispiel}
\tiny

```{r, eval = F, echo = T}
#| label: browser()
# Beispiel 1
erste_variable <- 1
zweite_variable <- 3
ergebnis <- c()
browser()                                    # Pausiert Skript
print("Das Ergebnis ist: ", ergebnis)
ergebnis <- erste_variable + zweite_variable
browser()

# Beispiel 2
for (i in 1:5) {
  print(i + 2)
  browser()
}
```

\small

Über das Argument `expr` kann auch eine Bedingung als boolesche Operation spezifiziert werden.

Mit \fbox{Enter} wird die Exekution fortgeführt.

Mit \fbox{Q} wird der browser beendet.


\AtBeginSection{}
\section{Datensimulationen}
# Datensimulationen ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

Debugging

**Datensimulationen**

Programmierübungen und Selbstkontrollfragen

\vfill



# Datensimulation

\vfill

\footnotesize
\setstretch{1.15}
```{r, echo = T, eval = F}
#| label: Datensimulation

# Seed setzen
set.seed(5)                                       # Startwert für den Zufallsgenerator setzen

# Simulationsparameter
n      <- 50                                      # Proband:innnen pro Gruppe
mu     <- c(                                      # Erwartungswertparameter
  18, 12,                                         # Pre und Post der Gruppe Klassisch
  19, 14)                                         # Pre und Post der Gruppe Online
sigsqr <- 3                                       # Varianzparameter (gleich für alle Gruppen)

# Datensimulation
D  <- data.frame(
        "Bedingung" = c(
          rep("Klassisch", n), rep("Online", n)), # n-mal "Klassisch", n-mal "Online"
        "Pre BDI" = c(
          round(rnorm(n, mu[1], sqrt(sigsqr))),   # n Zufallswerte aus Normalveritung mit mu[1]
          round(rnorm(n, mu[3], sqrt(sigsqr)))),  # n Zufallswerte aus Normalveritung mit mu[3]
        "Post BDI" = c(
          round(rnorm(n, mu[2], sqrt(sigsqr))),   # n Zufallswerte aus Normalveritung mit mu[2]
          round(rnorm(n, mu[4], sqrt(sigsqr))))   # n Zufallswerte aus Normalveritung mit mu[4]
        )

# Datenspeicherung
fname  <- file.path(data_path, "psychotherapie_datensatz.csv")
write.csv(D, file = fname)
```


\AtBeginSection{}
\section{Programmierübungen und Selbstkontrollfragen}
# Programmierübungen und Selbstkontrollfragen ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

Debugging

Datensimulationen

**Programmierübungen und Selbstkontrollfragen**

\vfill



# Programmierübungen und Selbskontrollfragen
