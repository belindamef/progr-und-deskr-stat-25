```{r eval = T, echo = F}
# | label: define directories
abb_path <- file.path(dirname(getwd()), "VL_Abbildungen")
data_path <- file.path(dirname(getwd()), "Daten")
```


# Titelfolie {.plain}
\center
![](../VL_Abbildungen/otto.png){width="20%"}

\vspace{2mm}

\Large
Programmierung und Deskriptive Statistik
\vspace{4mm}

\normalsize
BSc Psychologie WiSe 2024/25

\vspace{15mm}
\normalsize
Belinda Fleischmann


# Termine {.plain}

\setstretch{1.4}
\vfill
\center
\footnotesize
\renewcommand{\arraystretch}{1.1}
\begin{tabular}{llll}
Datum          & Einheit                  & Thema                                  & Form\\\hline
15.10.24       & R Grundlagen             & (1) Einführung                         & Seminar           \\
22.10.24       & R Grundlagen             & (2) R und Visual Studio Code           & Seminar           \\
29.10.24       & R Grundlagen             & (2) R und Visual Studio Code           & Übung             \\
05.11.24       & R Grundlagen             & (3) Vektoren, (4) Matrizen             & Seminar           \\
12.11.24       & R Grundlagen             & (5) Listen und Dataframes              & Seminar           \\
               & \textit{Leistungsnachweis 1}                                                          \\
19.11.24       & R Grundlagen             & (6) Datenmanagement                    & Seminar           \\
26.11.24       & R Grundlagen             & (2)-(6) R Grundlagen                   & Übung             \\
03.12.24       & Deskriptive Statistik    & (7) Häufigkeitsverteilungen            & Seminar           \\
10.12.24       & Deskriptive Statistik    & (8) Verteilungsfunktionen und Quantile & Seminar           \\
               & \textit{Leistungsnachweis 2}                                                          \\
17.12.24       & Deskriptive Statistik    & (9) Maße der zentralen Tendenz und Datenvariabilität & Seminar  \\
               & \textcolor{gray}{Weihnachtspause}                                                     \\
\textbf{07.01.25}       & \textbf{R Grundlagen}             & \textbf{(10) Strukturiertes Programmieren: Kontrollfluss, Debugging} & \textbf{Seminar}      \\
14.01.25       & Deskriptive Statistik    & (11) Anwendungsbeispiel                     & Übung             \\
               & \textit{Leistungsnachweis 3}                                                          \\
21.01.25       & Deskriptive Statistik    & (11) Anwendungsbeispiel                & Seminar           \\
28.01.25       & Deskriptive Statistik    & (11) Anwendungsbeispiel, Q\&A           & Seminar          \\
\end{tabular}


# Strukturiertes Programmieren in R - Titelfolie {.plain}

\vfill
\huge
\begin{center}
(10) Strukturiertes Programmieren:

Kontrollfluss und Debugging
\end{center}
\vfill




# AGENDA {.plain}
\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

Debugging

Programmierübungen

\vfill



\AtBeginSection{}
\section{Kontrollstrukturen}
# Kontrollstrukturen ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

**Kontrollstrukturen**

Debugging

Programmierübungen

\vfill


# Kontrollstrukturen
\setstretch{2.5}

\textcolor{darkblue}{Motivation}
\small

Programmiercode wird streng sequentiell Befehl für Befehl ausgeführt.

Manchmal möchten wir von dieser rein sequentiellen Befehlsreihenfolge abweichen.

Die prinzipiellen Werkzeuge dafür sind **Kontrollstrukturen**.

Dazu gehören `if`-statements, `switch`-statements und Schleifen mit `for`, `while` oder `repeat`. 

\vfill


# Kontrollstrukturen: `if`-statements

\textcolor{darkblue}{if-statements}

\footnotesize
Ermöglicht die Ausführung eines spezifischen Codeblocks, wenn eine bestimmte Bedingung den Wert \texttt{TRUE} hat.

```{r, echo = T, eval = F}
# Pseudocode
if (Bedingung) {
  TrueAktion        # Befehl, der ausgeführt wird, falls Bedingung TRUE ist
}
```

\small

* Wenn `Bedingung` `TRUE` ist, wird `TrueAktion` ausgführt.
* Wenn `Bedingung` `FALSE` ist, wird `TrueAktion` nicht ausgeführt.

\normalsize

\textcolor{darkblue}{if-else-statements}

\footnotesize

Bietet alternative Ausführungsmöglichkeiten, je nachdem, ob eine Bedingung den Wert \texttt{TRUE} oder \texttt{FALSE} hat.

```{r, echo = T, eval = F}
# Pseudocode
if (Bedingung) {
  TrueAktion        # Befehl, der ausgeführt wird, falls Bedingung TRUE ist
} else {
  FalseAktion       # Befehl, der ausgeführt wird, falls Bedingung FALSE ist
}
```

\small

* Wenn `Bedingung` `TRUE` ist, wird `TrueAktion` ausgführt.
* Wenn `Bedingung` `FALSE` ist, wird `FalseAktion` ausgeführt.


# Kostrollstrukturen: `if`-statements

\textcolor{darkcyan}{Beispiele}

\footnotesize

```{r, echo = T, eval = T}
x <- 3
if (x > 0) {
  print("x ist größer als 0")
}

y <- -3
if (y > 0) {
  print("y ist größer als 0")
} else {
  print("y ist nicht größer als 0")
}
```

# Wiederholung: Logischer Operatoren

\setstretch{1.6}

\small

* Die Boolesche Algebra und R kennen zwei *logische Werte*: TRUE und FALSE
* Bei Auswertung von Relationsoperatoren ergeben sich logische Werte

\begin{center}
\begin{tabular}{l|l}
Relationsoperator 	& Bedeutung 							\\\hline
$==$ 				& Gleich 								\\
$!=$ 				& Ungleich 								\\
$<$, $>$			& Kleiner, Größer 						\\
$<=$, $>=$ 			& Kleiner gleich, Größer gleich			\\
$\vert$    			& ODER              					\\
$\&$    			& UND              						\\
\end{tabular}
\end{center}

\vfill

* $<,<=,>,>=$ werden zumeist auf numerische Werte angewendet.
* $==,!=$ werden zumeist auf beliebige Datenstrukturen angewendet.
* $\vert$  und $\&$ werden zumeist auf logische Werte angewendet.
* $\vert$ implementiert das inklusive *oder*. Die Funktion xor() implementiert das exklusive ODER.



# Kontrollstrukturen: `if`-statements

\textcolor{darkcyan}{Beispiele}

\tiny
\setstretch{1.1}
\vfill

```{r, echo = T, eval = T}
x <- 3
y <- 2

# Logisches UND/ODER
if (x > 0 || y > 0) {
  print("Es sind beide, oder eine der beiden Variablen größer 0.")
} else {
  print("Keine der Variablen ist größer 0.")
}
```
\vfill

```{r, echo = T, eval = T}
# Logisches UND
if (x > 0 && y > 0) {
  print("x und y sind beide größer 0.")
} else {
  print("Es sind nicht beide Variablen x und y größer 0, aber vielleicht eine der beiden.")
}
```

\vfill

```{r, echo = T, eval = T}
# Exklusives ODER
if (xor(x > 0, y > 0)) {
  print("Genau eine der 2 Variablen x und y ist größer 0, aber nicht beide.")
} else {
  print("Es sind entweder keine der Variablen x und y oder beide größer 0.")
}
```


# Kontrollstrukturen: `switch`-statements

\textcolor{darkblue}{Motivation}

\small

Wenn wir mehrere ähnliche Bedingungen überprüfen möchten, von denen immer nur eine zutrifft, können kombinierte \texttt{if-else}-Statements schnell unübersichtlich und schwer lesbar werden. In solchen Fällen bietet sich das \texttt{switch}-Statement als strukturierte und kompakte Alternative an.

\vfill

\footnotesize
```{r, echo = T, eval = T}
x <- 2
if (x == 1) {
  print("Aktion 1")
} else if(x == 2) {
  print("Aktion 2")
} else if(x == 3) {
  print("Aktion 3")
} else if(x == 4) {
  print("Aktion 4")
}
```

\vfill

# Kontrollstrukturen: `switch`-statements

\textcolor{darkblue}{switch-statement}

\footnotesize

Vereinfacht die Auswahl zwischen mehreren Alternativen, ohne eine lange Verkettung von \texttt{if-else}-Statements zu verwenden.


\vspace{2mm}

```{r, echo = T, eval = F}
# Pseudocode
switch(
  x,                                # Variable, die geprüft wird
  Aktion 1,                         # Ausführung, wenn x == 1
  Aktion 2,                         # Ausführung, wenn x == 2
  Aktion 3,                         # Ausführung, wenn x == 3
  Aktion 4                          # Ausführung, wenn x == 4
)
```



\vfill

# Kontrollstrukturen: `switch`-statements

\vspace{3mm}

\setstretch{1.5}
\normalsize
\textcolor{darkblue}{switch-statement mit Integer}

\footnotesize
Wenn der Input numerisch gegeben ist (z. B. \texttt{x <- 2}), wird die Position des entsprechenden Falls ausgewählt.
\setstretch{1.1}
```{r, echo = T, eval = T}
x <- 2
switch(
  x,                               # switch Variable
  print("Aktion 1"),               # 1. Aktion
  print("Aktion 2"),               # 2. Aktion
  print("Aktion 3"),               # 3. Aktion
  print("Aktion 4")                # 4. Aktion
)
```

\setstretch{1.5}

\normalsize
\textcolor{darkblue}{switch-statement mit Character}

\footnotesize
Wenn der Input als character gegeben ist (z. B. \texttt{x <- \char`\"a\char`\"}), wird der Fall anhand des Namens ausgewählt.

\setstretch{1.1}
```{r, echo = T, eval = T}
x <- "a"
switch(
  x,                               # switch Variable
  a = print("Aktion 1"),           # 1. Aktion
  b = print("Aktion 2"),           # 2. Aktion
  c = print("Aktion 3"),           # 3. Aktion
  d = print("Aktion 4")            # 4. Aktion
)

```

\vfill
\vfill


# Kontrollstrukturen: `for`-Schleifen

\normalsize
\textcolor{darkblue}{for-Schleifen}

\footnotesize
Wiederholt einen Codeblock für jedes Element in einer Sequenz oder Sammlung.

```{r, echo = T, eval = F}
# Pseudocode
for (item in sequenz) {
  Aktion                           # Aktion, die wiederholt werden soll
}
```

\vfill
\small
\textcolor{darkcyan}{Beispiel}
\footnotesize

```{r, echo = T, eval = T}
for (i in 1:3) {
  print(i)                         # Aktion, die wiederholt werden soll
}
```

\vfill

# Kontrollstrukturen: `while` -Schleifen

\setstretch{1.3}
\normalsize
\textcolor{darkblue}{while-Schleifen}

\footnotesize
Führt einen Codeblock wiederholt aus, solange eine Bedingung den Wert \texttt{TRUE} hat.

\vspace{2mm}

\setstretch{1.1}
```{r, echo = T, eval = F}
while (Bedingung) {
  TrueAktion            # TrueAktion wird ausgeführt, solange Condition == TRUE
}
```

\textcolor{darkcyan}{Beispiel}

\setstretch{1}
```{r, echo = T, eval = T}
i <- 5
while (i < 11) {
  print(i)
  i <- i + 1
}
```


# Kontrollstrukturen: `repeat` -Schleifen
\setstretch{1.3}
\normalsize
\textcolor{darkblue}{repeat-Schleifen}

\footnotesize
Wiederholt einen Codeblock unbegrenzt oft, bis eine \texttt{break}-Anweisung die Schleife beendet.

\vspace{2mm}
\setstretch{1.1}

```{r, echo = T, eval = F}
# Pseudocode
repeat {
  Aktion                # Aktion wird ausgeführt, bis ein break Befehl evaluiert wird
}
```

\textcolor{darkcyan}{Beispiel}

\setstretch{1}
```{r, echo = T, eval = T}
i <- 1
repeat {
  print(i)
  i <- i + 1
  if (i == 5) {
    break
  }
}
```



\AtBeginSection{}
\section{Debugging}
# Debugging ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

**Debugging**

Programmierübungen

\vfill

# Debugging
\setstretch{1.7}
\vfill
\justifying

"Als Debuggen (dt. Entwanzen) oder Fehlerbehebung bezeichnet man in der Informatik den Vorgang, in einem Computerprogramm Fehler oder unerwartetes Verhalten zu diagnostizieren und zu beheben. Die Suche von Programmfehlern (sogenannten Bugs) ist eine der wichtigsten und anspruchsvollsten Aufgaben der Softwareentwicklung und nimmt einen großen Teil der Entwicklungszeit in Anspruch."

\vfill
\flushright
\textit{Wikipedia}

# \textit{print} debugging

Gezieltes Einfügen von \texttt{print}-Anweisungen im Code an den Stellen, an denen bestimmte Variablenwerte oder Zwischenergebnisse inspiziert werden sollen. Diese Methode hilft, die Ausführungsschritte und den aktuellen Zustand des Programms besser zu verstehen.

\vfill

\footnotesize
\textcolor{darkcyan}{Beispiel}

```{r, eval = F, echo = T}
#| label: print()
#| error: true
# Fehlerhaftes Skript
meine_Liste    <- list("1", 2, "drei", TRUE)
listen_element <- meine_Liste[2]
rechenergebnis <- exp(listen_element)
print(rechenergebnis)
```

```{r, eval = T, echo = F}
#| error: true
# Fehlerhaftes Skript
meine_Liste    <- list("1", 2, "drei", TRUE)
listen_element <- meine_Liste[2]
rechenergebnis <- exp(listen_element)
print(rechenergebnis)
```

\textbf{Problem}: Die Variable \texttt{listen\_element} scheint \texttt{non-numeric} zu sein.

# \textit{print} debugging

\footnotesize
\textcolor{darkcyan}{Beispiel fortgeführt}

\textbf{Problemanalyse}:Im Folgenden wird die Variable \texttt{listen\_element} über \texttt{print()} bzw. \texttt{cat()} inspiziert.

\vfill

```{r, eval = F, echo = T}
#| error: true

# Fehlerhaftes Skript mit print-debugging
meine_Liste    <- list("1", 2, "drei", TRUE)
listen_element <- meine_Liste[2]
cat(                                           # print debugging
  "listen_element:", listen_element,           # Ausgabe des Werts der Variable
  "Typ:", typeof(listen_element)               # Ausgabe des Typs der Variable
)
rechenergebnis <- exp(listen_element)
print(rechenergebnis)
```

```{r, eval = T, echo = F}
#| error: true

# Debugging
meine_Liste    <- list("1", 2, "drei", TRUE)
listen_element <- meine_Liste[2]
print(paste("listen_element:", listen_element, "Typ:", typeof(listen_element)))
rechenergebnis <- exp(listen_element)
print(rechenergebnis)
```

\vfill

\textbf{Ergebnis}:
\texttt{listen\_element} ist vom Typ \texttt{list}, obwohl wir den Wert eines einzelnen Elements der Liste erwarten.

\textbf{Fehlerursache}:
Falsche Indizierung der Liste: Es wurde \texttt{[]} verwendet, statt der korrekten \texttt{[[]]}, um auf das Element der Liste zuzugreifen. \texttt{[]} gibt eine Liste zurück, während \texttt{[[]]} den tatsächlichen Wert des Elements extrahiert.


# Debugging mit \texttt{browser()}

\setstretch{1.5}
\small

Die `R base` Funktion `browser()` pausiert die Ausführung des Programms und erlaubt das Inspizieren der aktuellen Umgebung (*Global Environment*). Variablenwerte, Funktionen und andere Elemente können interaktiv geprüft werden, um den Ursprung von Fehlern einzugrenzen.


\textcolor{darkcyan}{Beispiele}

\setstretch{1.1}
\tiny

```{r, eval = F, echo = T}
#| label: browser()
# Beispiel 1
var_1    <- 1
var_2    <- 3
ergebnis <- c()
browser()                                  # Pausiert Skript
print("Das Ergebnis ist: ", ergebnis)
ergebnis <- var_1 + var_2
browser()                                  # Pausiert Skript

# Beispiel 2
for (i in 1:5) {
  print(i + 2)
  browser()                                # Pausiert Skript in jeder Iteration
}
```

\small
\setstretch{1.5}


Über das Argument `expr` kann auch eine Bedingung als boolesche Operation spezifiziert werden.

Mit \fbox{Enter} wird die Exekution fortgeführt.

Mit \fbox{Q} wird der browser beendet.




\AtBeginSection{}
\section{Programmierübungen}
# Programmierübungen ====================================== {.plain}

\large
\setstretch{2.5}
\vfill

Kontrollstrukturen

Debugging

**Programmierübungen**

\vfill



# Programmierübungen

\small
\setstretch{1.5}

\begin{enumerate}
\justifying
\item Erstelle R-Code, der überprüft, ob eine Zahl positiv, negativ oder null ist. Gib eine entsprechende Nachricht aus.
\item Erstelle R-Code, in dem eine Eingabe für die Wahl eines Wochentages akzeptiert und den vollständigen Namen des Wochentages ausgegeben wird (z.B., 1 für Montag, 2 für Dienstag, usw.).
\item Schreibe ein R-Skript, das die Zahlen von 1 bis 10 ausgibt. Jede Zahl soll in einer neuen Zeile stehen.
\item Der untenstehende Code soll in jeder Iteration der Schleife das Quadrat eines Elements aus dem Vektor \texttt{zahlen} ausgeben (d.h. in der ersten Iteration \texttt{1}, in der zweiten \texttt{4}, usw.). Stattdessen werden in jeder Iteration fünf Werte ausgegeben. Deine Aufgabe ist es, den Fehler zu finden.
Verwende dazu einmal \texttt{print()} und einmal \texttt{browser()}, um den Fehler zu identifizieren.

\end{enumerate}

\vfill
\setstretch{1.1}
\footnotesize

```{r}
zahlen <- c(1, 2, 3, 4, 5)
for (zahl in zahlen) {
  quadrat <- zahlen^2
  print(quadrat)
}
```


